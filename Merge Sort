#include <iostream>
#include <vector>

// Функция слияния двух отсортированных массивов
void merge(std::vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1; // размер левого подмассива
    int n2 = right - mid;    // размер правого подмассива

    // Временные массивы
    std::vector<int> leftArr(n1);
    std::vector<int> rightArr(n2);

    // Копируем данные в временные массивы
    for (int i = 0; i < n1; ++i)
        leftArr[i] = arr[left + i];
    for (int j = 0; j < n2; ++j)
        rightArr[j] = arr[mid + 1 + j];

    // Индексы
    int i = 0, j = 0, k = left;

    // Слияние данных обратно в исходный массив
    while (i < n1 && j < n2) {
        if (leftArr[i] <= rightArr[j]) {
            arr[k++] = leftArr[i++];
        } else {
            arr[k++] = rightArr[j++];
        }
    }

    // Копирование оставшихся элементов
    while (i < n1)
        arr[k++] = leftArr[i++];
    while (j < n2)
        arr[k++] = rightArr[j++];
}

// Рекурсивная функция сортировки слиянием
void mergeSort(std::vector<int>& arr, int left, int right) {
    if (left >= right)
        return; // базовый случай: массив из одного элемента

    int mid = left + (right - left) / 2;

    // сортировка первой половины
    mergeSort(arr, left, mid);
    // сортировка второй половины
    mergeSort(arr, mid + 1, right);
    // слияние отсортированных половин
    merge(arr, left, mid, right);
}

int main() {
    std::vector<int> array = {38, 27, 43, 3, 9, 82, 10};

    mergeSort(array, 0, array.size() - 1);

    // вывод отсортированного массива
    for (int num : array)
        std::cout << num << " ";
    std::cout << std::endl;

    return 0;
}
