#include <iostream>
#include <vector>

// Функция для преобразования массива в кучу (heapify)
void heapify(std::vector<int>& arr, int n, int i) {
    int largest = i;             // Изначально считаем, что корень – самый большой
    int left = 2 * i + 1;        // левый дочерний элемент
    int right = 2 * i + 2;       // правый дочерний элемент

    // Если левый ребенок больше корня
    if (left < n && arr[left] > arr[largest]) {
        largest = left;
    }

    // Если правый ребенок больше текущего крупнейшего
    if (right < n && arr[right] > arr[largest]) {
        largest = right;
    }

    // Если самый большой не корень, меняем их местами
    if (largest != i) {
        std::swap(arr[i], arr[largest]);
        // Рекурсивно вызываем для подтрубы
        heapify(arr, n, largest);
    }
}

// Функция для сортировки массива методом пирамидальной сортировки
void heapSort(std::vector<int>& arr) {
    int n = arr.size();

    // Построение кучи (перестроение массива)
    for (int i = n / 2 - 1; i >= 0; i--) {
        heapify(arr, n, i);
    }

    // Один за другим извлекаем элементы из кучи
    for (int i = n - 1; i >= 0; i--) {
        // Перемещаем текущий корень в конец
        std::swap(arr[0], arr[i]);

        // Восстанавливаем свойство кучи для оставшейся части
        heapify(arr, i, 0);
    }
}

// Основная программа для тестирования
int main() {
    std::vector<int> arr = {12, 11, 13, 5, 6, 7};

    std::cout << "Исходный массив:\n";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << "\n";

    heapSort(arr);

    std::cout << "Отсортированный массив:\n";
    for (int num : arr) {
        std::cout << num << " ";
    }
    std::cout << "\n";

    return 0;
}
